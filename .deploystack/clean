# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# DON'T REMOVE FROM test script.
CYAN='\033[0;36m'
BCYAN='\033[1;36m'
NC='\033[0m' # No Color
DIVIDER=$(printf %"$(tput cols)"s | tr " " "*")
DIVIDER+="\n"

function get_project_id() {
    local __resultvar=$1
    VALUE=$(gcloud config get-value project | xargs)
    eval $__resultvar="'$VALUE'"
}

function get_project_number() {
    local __resultvar=$1
    local PRO=$2
    VALUE=$(gcloud projects list --filter="project_id=$PRO" --format="value(PROJECT_NUMBER)" | xargs)
    eval $__resultvar="'$VALUE'"
}

# DISPLAY HELPERS
function section_open() {
    section_description=$1
    printf "$DIVIDER"
    printf "${CYAN}$section_description${NC} \n"
    printf "$DIVIDER"
}

function section_close() {
    printf "$DIVIDER"
    printf "${CYAN}$section_description ${BCYAN}- done${NC}\n"
    printf "\n\n"
}

function evalTest() {
    local command=$1
    local expected=$2

    local ERR=""
    got=$(eval $command 2>errFile)
    ERR=$(<errFile)

    if [ ${#ERR} -gt 0 ]; then
        if [ "$expected" = "EXPECTERROR" ]; then
            printf "ok \n"
            return
        fi

        printf "expecting no error, got error='$ERR'   \n"
        exit 1
    fi

    if [ "$got" != "$expected" ]; then
        printf "expecting: '$expected' got: '$got'  \n"
        exit 1
    fi

    printf "$expected is ok\n"
}
# END DON'T REMOVE FROM test script.
get_project_id PROJECT
gcloud services enable cloudresourcemanager.googleapis.com --project=$PROJECT
get_project_number PROJECT_NUMBER $PROJECT

REGION=us-central1
ZONE=us-central1-a
BASENAME=mytestapp
LOCATION=US


section_open "Removing Load Balacing resources"
    gcloud compute forwarding-rules delete $BASENAME-load-balancer --global -q
    gcloud compute target-http-proxies delete $BASENAME-load-balancer-http-proxy -q
    gcloud compute url-maps delete $BASENAME-load-balancer-url-map -q
    gcloud compute backend-services delete $BASENAME-load-balancer-backend-default --global -q
    gcloud compute health-checks delete $BASENAME-load-balancer-hc-default --global -q
section_close


section_open "Removing Memorystore for Redis"
    gcloud redis instances delete $BASENAME-cache --region=$REGION -q
section_close


section_open "Removing Cloud SQL"
    CLOUD_SQL=$(gcloud sql instances list --filter='labels.app=mytestapp' --format='value(name)')
    gcloud sql instances delete $CLOUD_SQL -q
section_close


section_open "Removing Compute Engine instances"
    gcloud compute instance-groups managed delete $BASENAME-mig --region=$REGION -q
section_close


section_open "Removing IAM resources"
    gcloud iam service-accounts delete $BASENAME@$PROJECT.iam.gserviceaccount.com -q
section_close


section_open "Removing Network resources"
    gcloud compute firewall-rules delete $BASENAME-vpc-allow-ssh-from-iap $BASENAME-load-balancer-hc-0 -q
    gcloud compute routers delete $BASENAME-vpc-nat-router --region=$REGION -q
    gcloud compute addresses delete service-networking-address --global -q
    gcloud compute networks subnets delete subnet-us-central1 --region=$REGION -q
    gcloud compute networks delete $BASENAME-vpc -q
    gcloud compute security-policies delete $BASENAME-policy -q
    gcloud compute addresses delete $BASENAME-load-balancer-address --global -q
section_close


printf "$DIVIDER"
printf "CONGRATS!!!!!!! \n"
printf "Everything is all cleaned up.\n"
printf "$DIVIDER"	
